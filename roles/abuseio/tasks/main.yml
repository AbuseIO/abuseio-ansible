---
# tasks file for abuseio
- name: Pulling AbuseIO Version {{ abuseio_version }} from Gitlab
  git:
    repo: 'https://github.com/AbuseIO/AbuseIO.git'
    dest: /opt/abuseio
    version: "{{ abuseio_version }}"
    force: yes

- name: Create abuseio group
  group:
    name: abuseio
    state: present

- name: Create abuseio user
  user:
    name: abuseio
    shell: /bin/bash
    createhome: no
    home: /opt/abuseio
    groups: abuseio
    append: yes

- name: Adding existing user '{{ item }}' to group abuseio
  user:
    name: '{{ item }}'
    groups: abuseio
    append: yes
  with_items:
    - "www-data"
    - "postfix"
  notify: restart apache

- name: create ENV configuration.
  template:
    src: .env.j2
    dest: "{{ abuseio_basedir }}/.env"
    owner: abuseio
    group: abuseio
    mode: 0660

- name: Update permissions on abuseio base installation
  file:
    path: '{{ abuseio_basedir }}'
    state: directory
    owner: abuseio
    group: abuseio
    recurse: yes

- name: Update permissions on abuseio storage dir
  file:
    path: "{{ abuseio_basedir }}/storage"
    state: directory
    owner: abuseio
    group: abuseio
    mode: 0770
    recurse: yes

- name: Update permissions on abuseio cache dir
  file:
    path: "{{ abuseio_basedir }}/bootstrap/cache"
    state: directory
    owner: abuseio
    group: abuseio
    mode: 0770
    recurse: yes

- name: Run composer install
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php /usr/local/bin/composer install
  register: composer_install_result
  changed_when: composer_install_result.stderr | search('- \w+ing ')

- name: Migrating DB
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan migrate --force
  register: migrate_result
  changed_when: "migrate_result.stdout != 'Nothing to migrate.'"

- name: List artisan commands
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan
  register: artisan_commands

- name: Clear application cache
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan cache:clear
  when: artisan_commands.stdout.find('cache:clear') != -1
  ignore_errors: yes

- name: Optimize code
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan clear-compiled && /usr/bin/php artisan optimize
  when: artisan_commands.stdout.find('optimize') != -1

- name: Generate APP KEY
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan key:generate
  when: artisan_commands.stdout.find('key:generate') != -1

- name: Generate Installation ID
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan app:id
  when: artisan_commands.stdout.find('app:id') != -1

- name: Create log directory
  file:
    path: "/var/log/abuseio"
    state: directory
    owner: syslog
    group: adm
    mode: 0660
    recurse: yes

- name: Configure application sessions
  template:
    src: "templates/config/session.php.j2"
    dest: "{{ abuseio_basedir }}/config/production/session.php"
    owner: abuseio
    group: abuseio
    mode: 0770

- name: Configure application base
  template:
    src: "templates/config/app.php.j2"
    dest: "{{ abuseio_basedir }}/config/production/app.php"
    owner: abuseio
    group: abuseio
    mode: 0770

- name: copy abuseio logrotate files
  copy:
    src: "{{ abuseio_basedir }}/extra/etc/logrotate.d/"
    dest: /etc/logrotate.d/

- name: copy abuseio syslog files
  copy:
    src: "{{ abuseio_basedir }}/extra/etc/rsyslog.d/"
    dest: /etc/rsyslog.d/

- name: restart syslog service 
  systemd:
    state: restarted
    daemon_reload: yes
    name: syslog

- name: copy abuseio systemd files
  copy:
    src: "{{ abuseio_basedir }}/extra/etc/systemd/system/"
    dest: /etc/systemd/system/

- name: Force systemd to reread configs
  systemd: daemon_reload=yes

- name: Enable and start AbuseIO Queue abuseio_queue_email_incoming
  systemd:
    name: abuseio_queue_email_incoming
    state: started
    enabled: True

- name: Enable and start AbuseIO Queue abuseio_queue_email_outgoing
  systemd:
    name: abuseio_queue_email_outgoing
    state: started
    enabled: True

- name: Enable and start AbuseIO Queue abuseio_queue_collector
  systemd:
    name: abuseio_queue_collector
    state: started
    enabled: True

- name: Restart queues
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php  artisan queue:restart

- name: Create abuseio GUI admin user
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan user:create {{ abuseio_admin_user }} Default --password {{ abuseio_admin_password }}
  when: artisan_commands.stdout.find('user:create') != -1

- name: Assign admin role to GUI admin user
  shell: chdir={{ abuseio_basedir }}
    /usr/bin/php artisan role:assign --role admin --user {{ abuseio_admin_user }}
  when: artisan_commands.stdout.find('role:assign') != -1

- name: Install cron
  cron:
    name: "abuseio"
    minute: "*"
    job: "/usr/bin/php {{ abuseio_basedir }}/artisan schedule:run >> /dev/null 2>&1"
    user: abuseio
    cron_file: abuseio

